// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview An AI agent that resolves a company name to an email address.
 *
 * - resolveCompanyEmail - A function that handles the company email resolution process.
 * - ResolveCompanyEmailInput - The input type for the resolveCompanyEmail function.
 * - ResolveCompanyEmailOutput - The return type for the resolveCompanyEmail function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ResolveCompanyEmailInputSchema = z.object({
  companyName: z.string().describe('The name of the company to resolve the email address for.'),
});
export type ResolveCompanyEmailInput = z.infer<typeof ResolveCompanyEmailInputSchema>;

const ResolveCompanyEmailOutputSchema = z.object({
  emailAddress: z.string().describe('The resolved email address for the company.'),
});
export type ResolveCompanyEmailOutput = z.infer<typeof ResolveCompanyEmailOutputSchema>;

export async function resolveCompanyEmail(input: ResolveCompanyEmailInput): Promise<ResolveCompanyEmailOutput> {
  return resolveCompanyEmailFlow(input);
}

const prompt = ai.definePrompt({
  name: 'resolveCompanyEmailPrompt',
  input: {schema: ResolveCompanyEmailInputSchema},
  output: {schema: ResolveCompanyEmailOutputSchema},
  prompt: `You are an expert at finding email addresses for companies.

  Given the name of a company, you will find the email address for that company.

  Company Name: {{{companyName}}}
  `, config: {
    safetySettings: [
      {
        category: 'HARM_CATEGORY_HATE_SPEECH',
        threshold: 'BLOCK_ONLY_HIGH',
      },
      {
        category: 'HARM_CATEGORY_DANGEROUS_CONTENT',
        threshold: 'BLOCK_NONE',
      },
      {
        category: 'HARM_CATEGORY_HARASSMENT',
        threshold: 'BLOCK_MEDIUM_AND_ABOVE',
      },
      {
        category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
        threshold: 'BLOCK_LOW_AND_ABOVE',
      },
    ],
  },
});

const resolveCompanyEmailFlow = ai.defineFlow(
  {
    name: 'resolveCompanyEmailFlow',
    inputSchema: ResolveCompanyEmailInputSchema,
    outputSchema: ResolveCompanyEmailOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
